# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  #Pipeline config variables:
  EXEC_AGENT: "TestAgent"

  #Environment variables: 
  MSBUILD_EXE: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe"
  GX_PATH: "C:\\Program Files (x86)\\GeneXus\\GeneXus18U9"
  WORKING_DIR: "C:\\Users\\nsalazar\\Documents\\Git\\Azure Pipelines\\AzureRepository"
  KB_PATH: C:\\KBS\\$(KB_ALIAS)
  
  #KB Building variables:
  KB_ALIAS: "AzureDevOpsTest"
  GXSERVER_URL: "https://gxserver18.accionpoint.com"
  GXSERVER_USER: "sa_jenkins_genexus"
  GXSERVER_PASS: "567NTb0L4L4wjK4hZkAl"
  KBENVIRONMENT: ""
  KBGENERATOR: $(generator)
  FORCE_REBUILD: "false"
  
  #Deploy variables:
  PUBLISH_SETTINGS: $(azurePublish)
  DEPLOYMENT_UNIT: $(deploymentUnit)
  DEPLOY_NAME: $(deploymentUnit)$(Build.BuildNumber)
  APPLICATION_KEY: $(encriptKey)
  
  #Code versioning variables:
  GIT_USER: "nehemias1999"
  GIT_PASSWORD: "CANGALLOtandil564" #This could alternatively be a PAT
  GIT_REPO: "https://github.com/$(GIT_USER)/AzureRepository"
  GIT_BRANCH: "main" #Branch must exist. Content will be overwritten

# Scheduled triggers. Can also be setup through UI, which takes precendence.
schedules:
  - cron: "*/10 * * * *"
    displayName: Custom time trigger
    branches:
      include:
        - main
    always: false

trigger:
  - main

pool:
  name: $(EXEC_AGENT)

jobs:

  - job: CheckoutOrUpdate
    condition: always()
    steps:
      - script: >
          $(MSBUILD_EXE) "$(WORKING_DIR)\\AzureCICD.msbuild" -target:CreateOrUpdateKB /p:WorkingDirectory=$(KB_PATH) /p:CreateDbInKbFolder=True
          /p:DbaseName=$(KB_ALIAS) /p:DbaseUseIntegratedSecurity=True /p:ServerUrl=$(GXSERVER_URL) /p:ServerKbAlias=$(KB_ALIAS) 
          /p:ServerUsername=$(GXSERVER_USER) /p:ServerPassword=$(GXSERVER_PASS)
          
          set /p updateCount=<"$(KB_PATH)\\updateCount.txt"
        name: CreateOrUpdateKB

  # - job: BuildAndDeploy
  #   dependsOn: CheckoutOrUpdate
  #   condition: or(and(succeeded(), gt(dependencies.CheckoutOrUpdate.outputs['CreateOrUpdateKB.updateCount'], '0')),eq(variables['forceRebuild'], 'true'))
  #   steps:
  #     - script: rmdir $(KB_PATH)\NetModel /s /q
  #       condition: eq(variables['forceRebuild'], 'true')
  #       name: CleanBuildDir

  #  _PATH   - script: $(MSBUILD) "$(GX_PATH)\AzureCICD.Msbuild" -target:Build /p:WorkingDirectory=$(KB_PATH) /p:ForceRebuild=$(forceRebuild)
  #       name: BuildKB

  #     - script: >
  #  _PATH       $(MSBUILD) "$(GX_PATH)\deploy.msbuild" /t:CreateDeploy /p:KBPath=$(KB_PATH);KBEnvironment=$(KBENVIRONMENT);DeploymentUnit=$(DEPLOYMENT_UNIT) 
  #         /p:ProjectName=$(DEPLOY_NAME_PATH) /p:TargetId="AZURE" /p:ObjectNames="DeploymentUnitCategory:$(DEPLOYMENT_UNIT)"
  #         /p:DEPLOY_TARGETS="$(GX_PATH)\DeploymentTargets\Azure\azure.targets" 
  #         /p:DeployFullPath="$(KB_PATH)\NetModel\Deploy\AZURE\$(DEPLOYMENT_UNIT)\_PATH$(DEPLOY_NAME)" 
  #         /p:WebSourcePath="$(KB_PATH)\NetModel\web" /p:GX_PROGRAM_DIR="$(GX_PATH)" 
  #         /p:AZURE_PUBLISH_SETTINGS="$(PUBLISH_SETTINGS)" 
  #         /p:APPLICATION_KEY="$(APPLICATION_KEY)"
  #       name: CreateDeploy

  #     - script: >  
  #         $(MSBUILD) /ToolsVersion:4.0_PATH "$(KB_PATH)\NetModel\web\$(DEPLOY_NAME).gxdproj" /t:CreatePackage 
  #         /p:GX_PROGRAM_DIR="$(GX_PATH)" /p:AZURE_PUBLISH_SETTINGS="$(PUBLISH_SETTINGS)" 
  #         /p:APPLICATION_KEY="$(APPLICATION_KEY)"
  #       name: CreatePackage

  #     - script: >
  #  _PATH       $(MSBUILD) "$(GX_PATH)\DeploymentTargets\Azure\deploy.msbuild" /t:Deploy 
  #         /p:AZURE_PUBLISH_SETTINGS="$(PUBLISH_SETTINGS)" 
  #         /p:APPLICATION_KEY="$(APPLICATION_KEY)" /p:APPLICATION_NAME="$(DEPLOY_NAME)" 
  #         /p:DEPLOY_PATH="$(KB_PATH)\N_PATHetModel\Deploy\AZURE\$(DEPLOYMENT_UNIT)\$(DEPLOY_NAME)" 
  #         /p:GX_PROGRAM_DIR="$(GX_PATH)" /p:DeploySource="$(KB_PATH)\NetModel\Deploy\AZURE\$(DEPLOY_NAME).zip" 
  #         /p:CreateCloudPackage="false" /p:KBPath=$(KB_PATH) /p:KBEnvironment="$(KBENVIRONMENT)" /p:KBVersion="ActualizacionAmbiente2" 
  #         /p:DeploymentUnit="$(DEPLOYM_PATHENT_UNIT)" /p:ProjectName="$(DEPLOY_NAME)" /p:TargetId="AZURE" /p:ObjectNames="DeploymentUnitCategory:$(DEPLOYMENT_UNIT)"
  #         /p:DEPLOY_TARGETS="$(GX_PATH)\DeploymentTargets\Azure\azure.targets" 
  #         /p:DeployFullPath="$(KB_PATH)\NetModel\Deploy\AZURE\$(DEPLOYMENT_UNIT)\$(DEPLOY_NAME)" 
  #         /p:WebSourcePath="$(KB_PATH)\NetModel\web" /p:GENERATOR="$(KBGENERATOR)"
  #       name: DeploytoWebApp
  
  # - job: CloneOrPull
  #   dependsOn: BuildAndDeploy
  #   condition: succeeded()
  #   steps:
  #     - script: |
  #         IF EXIST "$(GIT_BRANCH)" (
  #           cd $(GIT_BRANCH)
  #           git pull
  #         ) ELSE (
  #           git clone https://$(GIT_USER):$(GIT_PASSWORD)@$(GIT_REPO) $(WORKING_DIR)\$(GIT_BRANCH)
  #         )
  #       workingDirectory: $(WORKING_DIR)
  #       name: CloneOrPull
      
  # - job: PushSourcesToGit
  #   dependsOn: CloneOrPull
  #   condition: succeeded()
  #   steps:
  #     - script: >
  #         xcopy /E /I /Y "$(KB_PATH)\NetModel" "$(WORKING_DIR)\$(GIT_BRANCH)"

  #         cd $(GIT_BRANCH)

  #         git add *
        
  #         git commit -m "Commit build $(Build.BuildNumber)"

  #         git push -u origin $(GIT_BRANCH)
  #       workingDirectory: $(WORKING_DIR)
  #       name: CommitPush
